% This file was created with JabRef 2.7.2.
% Encoding: ISO8859_1


@BOOK{strunk:white,
  title = {The Elements of Style},
  publisher = {Allyn and Bacon},
  year = {2000},
  author = {William Strunk Jr. and E. B. White},
  edition = {4th},
  keywords = {scglib}
}

@INPROCEEDINGS{paper:example,
  author = {First Author and Martin Schoeberl},
  title = {Real-Time Alternative Bread Baking in {Mendocino}},
  booktitle = {Proceedings of the 113th IEEE Symposium on Real-time Computing
	(ISORC 2189)},
  year = {2189},
  address = {Mendocino, Calofornia},
  month = {February},
  publisher = {IEEE},
  owner = {martin},
}


@book{Sutherland2010,
address = {New York},
author = {Sutherland, Stuart and Davidmann, Simon and Flake, Peter},
edition = {2.},
pages = {418},
publisher = {Springer},
title = {{SystemVerilog for Design}},
year = {2010}
}

@misc{IEEE:18002,
author = {IEEE},
title = {{1800.2-2017 - IEEE Standard for Universal Verification Methodology Language Reference Manual}},
url = {https://ieeexplore.ieee.org/document/7932212},
urldate = {2020-09-04}
}

@Electronic{Snyder2019,
author = {Snyder, Wilson},
pages = {13},
title = {{Verilator: Your Big 4th Simulator: Roadmap}},
howpublished = {\url{https://www.veripool.org/papers/Verilator_Roadmap_CHIPS2019b.pdf}},
year = {2019}
}


@article{Asanovic2016,
abstract = {Rocket Chip is an open-source Sysem-on-Chip design generator that emits synthesizable RTL. It leverages the Chisel hardware construction language to compose a library of sophisticated generators for cores, caches, and interconnects into an integrated SoC. Rocket Chip generates general-purpose processor cores that use the open RISC-V ISA, and provides both an in-order core generator (Rocket) and an out-of-order core generator (BOOM). For SoC designers interested in utilizing heterogeneous specialization for added efficiency gains, Rocket Chip supports the integration of custom accelerators in the form of instruction set extensions, coprocessors, or fully independent novel cores. Rocket Chip has been taped out (manufactured) eleven times, and yielded functional silicon prototypes capable of booting Linux.},
author = {Asanovic, Krste et al.},
doi = {10.1023/A:1010000313106},
file = {:C$\backslash$:/Users/kaspe/Downloads/EECS-2016-17.pdf:pdf},
journal = {EECS Department, University of California, Berkeley, Technical Report},
number = {UCB/EECS-2016-17},
title = {{The Rocket Chip Generator}},
url = {http://www2.eecs.berkeley.edu/Pubs/TechRpts/2016/EECS-2016-17.html},
year = {2016}
}



@misc{ghdl, title={GHDL}, howpublished={https://github.com/ghdl/ghdl}, author={Tristan Gingold}}

@MISC{Yosys,
	author = {Clifford Wolf},
	title = {Yosys Open SYnthesis Suite},
	howpublished = "\url{http://www.clifford.at/yosys/}"
}

@MISC{ghdl-yosys-plugin,
	author = {Tristan Gingold},
	title = {ghdl-yosys-plugin},
	howpublished = "\url{https://github.com/ghdl/ghdl-yosys-plugin}"
}
@MISC{vhdl2verilog,
	author = {Simon Andersen},
	title = {VHDL2Verilog},
	howpublished = "\url{https://github.com/chisel-uvm/vhdl2verilog}"
}

@MISC{verilator,
	author = {Veripool},
	title = {Verilator},
	howpublished = "\url{https://www.veripool.org/wiki/verilator}"
}

%% Artificial intelligence a modern approach
@book{russell2002artificial,
  title={Artificial intelligence: a modern approach},
  author={Russell, Stuart and Norvig, Peter},
  year={2002},
  publisher={Prentice Hall}
}

@MISC{axi4standard,
	author = {ARM},
	title = {AMBA AXI and ACE Protocol Specification AXI3, AXI4, and AXI4-Lite ACE and ACE-Lite},
	howpublished = "\url{https://developer.arm.com/documentation/ihi0022/e/}"
}

@MISC{axi4vip,
	author = {Xilinx},
	title = {AXI Verification IP (VIP)},
	howpublished = "\url{https://www.xilinx.com/products/intellectual-property/axi-vip.html}"
}

@INPROCEEDINGS{rfuzz2018,  
  author = {Laeufer, Kevin and Koenig, Jack and Kim, Donggyu and Bachrach, Jonathan and Sen, Koushik},  booktitle = {2018 IEEE/ACM International Conference on Computer-Aided Design (ICCAD)},   
  title = {RFUZZ: Coverage-Directed Fuzz Testing of RTL on FPGAs},   
  year={2018},  
  volume={},  
  number={},  
  pages={1-8},  
  doi={10.1145/3240765.3240842}
}

@Misc{chisel:formal,
  title        = {Chisel Formal Verification},
  howpublished = {\url{https://github.com/tdb-alcorn/chisel-formal}},
  author       = {Tom Alcorn},
  note         = {Accessed: 2021-06-03},
}

@Misc{chisel:kiwi-formal,
  title        = {Chisel Formal Verification Extension},
  howpublished = {\url{https://github.com/ekiwi/kiwi-formal}},
  author       = {Kevin Laeufer},
  note         = {Accessed: 2021-06-03},
}

@Misc{chisel:dank-formal,
  title        = {Chisel Formal Verification Extension},
  howpublished = {\url{https://github.com/danielkasza/dank-formal}},
  author       = {Daniel Kasza},
  note         = {Accessed: 2021-06-03},
}

@INPROCEEDINGS{riscvdv,  
  author={Ahmadi-Pour, Sallar and Herdt, Vladimir and Drechsler, Rolf},  booktitle={MBMV 2021; 24th Workshop},   
  title={Constrained Random Verification for RISC-V: Overview, Evaluation and Discussion},  
  year={2021}
}

@Misc{microchip,
  title        = {Microchip},
  howpublished = {\url{https://www.microchip.com/}},
  note         = {Accessed: 2021-08-29}
}

@book{spear2008systemverilog,
  title={SystemVerilog for verification: a guide to learning the testbench language features},
  author={Spear, Chris},
  year={2008},
  publisher={Springer Science \& Business Media}
}

@book{scalacheck,
  title={ScalaCheck: The Definitive Guide},
  author={Rickard Nilsson},
  year={2014},
  publisher={Artima Press}
}

@Misc{uvm2015,
  title        = {{Universal Verification Methodology (UVM)} 1.2 Userâ€™s Guide},
  howpublished = {\url{https://www.accellera.org/images/downloads/standards/uvm/uvm_users_guide_1.2.pdf}},
  year         = {2015},
  author       = {Accellera Systems Initiative (Accellera)},
}

@Inbook{MehtaCRV2018,
author={Mehta, Ashok B.},
title={Constrained Random Verification (CRV)},
bookTitle={ASIC/SoC Functional Design Verification: A Comprehensive Guide to Technologies and Methodologies},
year={2018},
publisher={Springer International Publishing},
address={Cham},
pages={65--74},
abstract={Constrained Random Verification (CRV) is a methodology that is supported by SystemVerilog which has a built-in constraint solver. This allows you to constraint your stimulus to better target a design function, thereby allowing you to reach your coverage goal faster with accuracy. From that sense, coverage and CRV go hand in hand. You check your coverage and see where the coverage holes are. You then constrain your stimulus to target those holes and improve coverage.},
isbn={978-3-319-59418-7},
doi={10.1007/978-3-319-59418-7_5},
url={https://doi.org/10.1007/978-3-319-59418-7_5}
}

@INPROCEEDINGS{firrtl,
  author={A. {Izraelevitz} and J. {Koenig} and P. {Li} and R. {Lin} and A. {Wang} and A. {Magyar} and D. {Kim} and C. {Schmidt} and C. {Markley} and J. {Lawson} and J. {Bachrach}},
  booktitle={2017 IEEE/ACM International Conference on Computer-Aided Design (ICCAD)}, 
  title={Reusability is FIRRTL ground: Hardware construction languages, compiler frameworks, and transformations}, 
  year={2017},
  volume={},
  number={},
  pages={209-216},
  doi={10.1109/ICCAD.2017.8203780}
}

@conference{jacop2013,
  title = {JaCoP - Java Constraint Programming Solver},
  author = {Krzysztof Kuchcinski and Radoslaw Szymanek},
  year = {2013},
  language = {English},
  note = {CP Solvers: Modeling, Applications, Integration, and Standardization, co-located with the 19th International Conference on Principles and Practice of Constraint Programming ; Conference date: 16-09-2013}
}

@article{DBLP:journals/corr/abs-2102-02308,
  author    = {Timothy Trippel and
               Kang G. Shin and
               Alex Chernyakhovsky and
               Garret Kelly and
               Dominic Rizzo and
               Matthew Hicks},
  title     = {Fuzzing Hardware Like Software},
  journal   = {CoRR},
  volume    = {abs/2102.02308},
  year      = {2021},
  url       = {https://arxiv.org/abs/2102.02308},
  eprinttype = {arXiv},
  eprint    = {2102.02308},
  timestamp = {Tue, 09 Feb 2021 13:35:56 +0100},
  biburl    = {https://dblp.org/rec/journals/corr/abs-2102-02308.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@ELECTRONIC{afl:repo,
  author = {Michal Zalewski},
  title = {American Fuzzy Lop},
  howpublished = {https://github.com/google/AFL}
}

@MISC{afl:fuzzingtechniques,
  author = {Michal Zalewski},
  title = {Binary fuzzing strategies: what works, what doesn't},
  howpublished = {\url{https://lcamtuf.blogspot.com/2014/08/binary-fuzzing-strategies-what-works.html}},
  accessed = {2021.08.27}
}